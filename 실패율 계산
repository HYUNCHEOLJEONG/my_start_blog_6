#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>

using namespace std;

bool compare(pair<int, float>& a, pair<int, float>& b) {
    if (a.second == b.second) {
        return a.first < b.first;
    }
    return a.second > b.second;
}

vector<int> solution(int N, vector<int>& vt) {
    vector<int> answer;
    vector<float> challenger(N + 1, 0.0);
    vector <float > failer(N + 1, 0.0);
    for (int stage : vt) {
        if (stage <= N) {
            failer[stage]++;
        }
        for (int j = 1; j <= min(stage, N); j++) {
            challenger[j]++;
        }
    }
    vector<pair<int, float>>failRatio(N);
    for (int i = 1; i <=N; i++) {
        failRatio[i - 1].first=i;
        if (challenger[i] == 0) {
            failRatio[i-1].second = 0;
        }
        else {
            failRatio[i-1].second = static_cast<float>(failer[i] / challenger[i]);
        }
    }
    sort(failRatio.begin(), failRatio.end(), compare);
    for (int i = 0; i < N; i++) {
        answer.push_back(failRatio[i].first);
    }
    return answer;
}

void print(vector<int> vt1) {
    copy(vt1.begin(), vt1.end(), ostream_iterator<int>(cout, " "));
    cout << endl;
}

int main() {
    int N = 5;  // 테스트 값
    int N2 = 4;

    vector<int> cal = { 2, 1, 2, 6, 2, 4, 3, 3 };
    vector<int> cal2 = { 4, 4, 4, 4, 4 };

    print(solution(N, cal));  // 기대 출력: {3,4,2,1,5}
    print(solution(N2, cal2)); // 기대 출력: {4,1,2,3}

    return 0;
}
